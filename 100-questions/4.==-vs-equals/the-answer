== REFERENCJA

String str1 = "hello";
String str2 = "hello";

System.out.println(str1 == str2); // true, both references indicate the same object

W przykładzie powyżej, w momencie DEKLARACJI ZMIENNEJ str2, JVM sprawdza czy wartość "hello" istnieje już w StringPool'u.
Jeśli tak, to tworzona jest wyłącznie nowa referencja do tego samego obiektu.

Przechowywanie tylko raz każdego z łańcucha znaków nazywane jest String Intering'iem.
Po co się to robi? Wg teori i podręczników: w celu zaoszczędzenia pamięci, w szczególności gdy tworzone są duże ilości łańcuchów o identycznej wartości.


check whether "==" both variables REFER to the same object
 "==" operator compares the value of two object references to see whether they refer to the same String instance.

BUT string build from string literal will be added to something called the String constant pool, e.g. String s1 = "someString"; String s2 = "someString;" both s1 & s2 will share the same reference. s1 == s2 will return true.
But if they were constructed via the String constructor, e.g. String s1 = new String("someString"); String s2 = new String("someString"); then they will not share the same reference. s1 == s2 will return false. –

------------------------------

.equals(...) CZYSTA WARTOŚĆ

compares what it is written (compares values)

--------------------

Operators are generally used for primitive type comparisons and thus == is used for memory address comparison and equals() method is used for comparing objects.
